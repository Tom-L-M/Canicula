(function () {
    var KNN = {}

    KNN.Predictor = function (k, data, labels) {
        this.k = k;
        this.data = data;
        this.labels = labels;
        this.CalculateDistance = function (a, b) {
            var sub = [], total = 0; 
            for (var i = 0; i < a.length; i++) { sub.push(b[i] - a[i]); }
            for (var j = 0; j < sub.length; j++) { total += (sub[j] * sub[j]); }
            return Math.sqrt(total);
        }
        this.GenerateDistanceMap = function (point) {
            var map = [];
            var maxDistanceInMap;
            for (var index = 0, len = this.data.length; index < len; index++) {
                var otherPoint = this.data[index];
                var otherPointLabel = this.labels[index];
                var thisDistance = this.CalculateDistance(point, otherPoint);
                /**
                 * Keep at most k items in the map.
                 * Much more efficient for large sets, because this
                 * avoids storing and then sorting a million-item map.
                 * This adds many more sort operations, but hopefully k is small.
                 */
                if (!maxDistanceInMap || thisDistance < maxDistanceInMap) {
                    // Only add an item if it's closer than the farthest of the candidates
                    map.push({
                        index: index,
                        distance: thisDistance,
                        label: otherPointLabel
                    });
                    // Sort the map so the closest is first
                    map.sort(function (a,b) { return a.distance < b.distance ? -1 : 1; } );
                    // If the map became too long, drop the farthest item
                    if (map.length > this.k) { map.pop(); }
                    // Update this value for the next comparison
                    maxDistanceInMap = map[map.length - 1].distance;
                }
            }
            return map;
        }
        this.Predict = function (point) {
            var map = this.GenerateDistanceMap(point);
            var votes = map.slice(0, this.k);
            var counters = {}
            for (var i = 0; i < votes.length; i++) {
                if (counters[votes[i].label] === undefined) { counters[votes[i].label] = 0; }
                counters[votes[i].label] += 1; //counters = {male: x, female: x}
            }

            var marker = Object.keys(counters)[0]; var stopper = 0;
            for (var i = 0; i < Object.keys(counters); i++) {
                if (counters[Object.keys(counters)[i]] > stopper) { 
                    marker = Object.keys(counters)[i];
                }
            }
            return marker;
        }
    }

    return KNN;
}).call();